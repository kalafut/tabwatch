#!/usr/bin/env python

import json
import Queue
import subprocess
from subprocess import PIPE
import sys
import threading


PATTERNS = [
    ("glitch: all OK", None, "green"),
    ("glitch: failed", "glitch: building", "red"),
    ("glitch: failed", "--- FAIL", "yellow"),
    ("glitch: building", None, None),
    ("[nodemon] clean", None, "green"),
    ("[nodemon] app crashed", None, "red"),
    ("--- FAIL", None, None),
    ]

def set_color(hex_color):
    print "\033]6;1;bg;*;default\a",

    if hex_color:
        for idx, color in enumerate(["red", "green", "blue"]):
            print("\033]6;1;bg;{};brightness;{}\a".format(color, int(hex_color[idx*2+1:idx*2+3],16)))


def pipereader(in_pipe, out_pipe, queue):
    while True:
        line = in_pipe.readline()
        out_pipe.write(line)
        queue.put(item=line, block=True)

def loadconfig(filename):
    fp = open(filename)
    cfg = json.load(fp)
    return cfg

# colors, as RGB hex
COLORS = loadconfig("test.json")["colors"]

def run():
    proc = subprocess.Popen(sys.argv[1:], stdout=PIPE, stderr=PIPE)
    queue = Queue.Queue(maxsize=10)

    for pipe in ['stdout', 'stderr']:
        thread = threading.Thread(target=pipereader,
                                  args=(getattr(proc, pipe), getattr(sys, pipe), queue))
        thread.daemon = True
        thread.start()

    try:
        last_match = ""
        while True:
            line = queue.get(block=True).strip()

            for pat in PATTERNS:
                if pat[0] in line and (pat[1] == None or pat[1] in last_match):
                    last_match = line
                    set_color(COLORS.get(pat[2]))
                    sys.stdout.flush()
                    break

    except KeyboardInterrupt:
        set_color(None)
        exit()

if __name__ == '__main__':
    run()
