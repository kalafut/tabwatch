#!/usr/bin/env python

import json
import os
import Queue
import re
import subprocess
import sys
import threading

from subprocess import PIPE


CONFIG = os.path.join(os.path.expanduser("~"), ".tcatconfig")
PATTERNS = [
    ("glitch: all OK", None, "green"),
    ("glitch: failed", "glitch: building", "red"),
    ("glitch: failed", "--- FAIL", "yellow"),
    ("glitch: building", None, None),
    ("[nodemon] clean", None, "green"),
    ("[nodemon] app crashed", None, "red"),
    ("--- FAIL", None, None),
    ]

def set_color(hex_color):
    print "\033]6;1;bg;*;default\a",

    if hex_color:
        for idx, color in enumerate(["red", "green", "blue"]):
            print("\033]6;1;bg;{};brightness;{}\a".format(color, int(hex_color[idx*2:idx*2+2],16))),


def pipereader(in_pipe, out_pipe, queue):
    while True:
        line = in_pipe.readline()
        queue.put(item=(line, out_pipe), block=True)

class ConfigError(Exception):
    pass

def loadconfig(filename):
    fp = open(filename)

    cfg = json.load(fp)

    for cmd in cfg["commands"].iterkeys():
        for match in cfg["commands"][cmd]:
            if match["color"] not in cfg["colors"]:
                raise ConfigError("Color error")

    return cfg

# colors, as RGB hex
try:
    COLORS = loadconfig(CONFIG)["colors"]
except Exception as e:
    print e

def run():
    cfg = loadconfig(CONFIG)

    cmd = sys.argv[1]
    matchers = cfg["commands"][cmd]

    proc = subprocess.Popen(sys.argv[1:], stdout=PIPE, stderr=PIPE)
    queue = Queue.Queue(maxsize=10)

    for pipe in ['stdout', 'stderr']:
        thread = threading.Thread(target=pipereader,
                                  args=(getattr(proc, pipe), getattr(sys, pipe), queue))
        thread.daemon = True
        thread.start()

    try:
        last_match = ""
        while True:
            line, out_pipe = queue.get(block=True)

            # Remove newline here and put it back after the escape
            # escape characters to avoid a bunch of blank lines.
            out_pipe.write(line.rstrip())

            for matcher in matchers:
                pat = matcher["regex"]
                #if pat[0] in line and (pat[1] == None or pat[1] in last_match):
                if re.search(pat, line):
                    last_match = line
                    set_color(COLORS.get(matcher["color"]))
                    sys.stdout.flush()
                    break
            out_pipe.write("\n")

    except KeyboardInterrupt:
        set_color(None)
        exit()

if __name__ == '__main__':
    run()
